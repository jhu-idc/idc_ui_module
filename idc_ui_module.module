<?php

use Drupal\file\Entity\File;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

function idc_ui_module_theme($existing, $type, $theme, $path) {
  return [
    'header_left_template' => [
      'variables' => ['test_var' => NULL],
    ],
    'top_nav_template' => [
      'variables' => ['logged_in' => NULL],
    ],
    'footer_template' => [
      'variables' => [],
    ],
    'page--collections' => [
      'variables' => [
        'featured_collections' => NULL,
      ],
    ],
    'page--collection' => [
      'variables' => [
        'collection' => NULL,
        'featured_items' => NULL,
        'primary_description' => NULL,
        'citable_url' => NULL,
      ],
    ],
    'page--item' => [
      'variables' => [
        'item' => NULL,
      ],
    ],
    'page--search' => [
      'variables' => []
    ],
    'idc_search_template' => [
      'variables' => []
    ],
    'page--advanced-search' => [
      'variables' => []
    ]
  ];
}

use Symfony\Component\HttpFoundation\RedirectResponse;

function idc_ui_module_file_download($uri) {
  $MEDIA_TYPES = array(
    (object) [
      'type' => 'image',
      'source_field' => 'field_media_image',
    ],
    (object) [
      'type' => 'file',
      'source_field' => 'field_media_file',
    ],
    (object) [
      'type' => 'document',
      'source_field' => 'field_media_document',
    ],
    (object) [
      'type' => 'audio',
      'source_field' => 'field_media_audio_file',
    ],
    (object) [
      'type' => 'video',
      'source_field' => 'field_media_video_file',
    ],
    (object) [
      'type' => 'extracted_text',
      'source_field' => 'field_media_file',
    ],
    (object) [
      'type' => 'fits_technical_metadata',
      'source_field' => 'field_media_file',
    ],
  );


  $files = File::loadMultiple(array(), array(
    'uri' => $uri,
  ));

  if (count($files)) {
    foreach ($files as $item) {
      if ($item->uri === $uri) {
        $file = $item;
        break;
      }
    }
  }

  $file = \Drupal::entityTypeManager()
  ->getStorage('file')
  ->loadByProperties([
    'status' => 1,
    'uri' => $uri,
  ]);

  if($file) {
    $current_user = \Drupal::currentUser();
    $authorized_roles = ['administrator', 'collection_level_admin', 'global_admin'];
    $is_authorized = !!count(array_intersect($authorized_roles, array_values($current_user->getRoles())));

    # authorize access if user is special user #1, which Drupal treats as a kind of admin
    if (!$is_authorized) {
      $is_authorized = $current_user->id() == "1";
    }

    foreach ($MEDIA_TYPES as &$media_type_obj) {
      $media = \Drupal::entityTypeManager()
      ->getStorage('media')
      ->loadByProperties([
        'status' => 1,
        $media_type_obj->source_field => array_values($file)[0]->id(),
      ]);

      if (isset(array_values($media)[0]) && array_values($media)[0]->get('field_restricted_access')->getString() == "1" && !$is_authorized) {
        return -1;
      }
    }
  }

  return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function idc_ui_module_form_views_exposed_form_alter(&$form, $form_state) {
  // XXX: Exposed filters with REST appear to still render a form even though
  // it technically does not use one.
  if ($form['#action'] === "/search_rest_endpoint") {
    // Set the limit to be close to the lower bound URL parameter limit.
    $form['query']['#maxlength'] = 65536;
  }
}

/**
 * Implements hook_views_post_render().
 */
function idc_ui_module_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  // XXX: Cache max-age 0 isn't able to be utlized by anonymous users.
  // Similarly, a Serializer's cacheable metadata does not get bubbled up to the
  // view and thus we are stuck with setting our own cache tags. In the event
  // indexing more than just content (nodes) gets done this should be updated
  // to include those tags as well.
  // @see: https://www.drupal.org/docs/drupal-apis/cache-api/cache-max-age
  // @see: https://www.drupal.org/project/drupal/issues/3210146
  // @see: https://www.drupal.org/project/facets/issues/2939710
  if ($view->id() === 'solr_search_content') {
    $output['#cache']['tags'][] = 'node_list';
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Modify Repository Item Contact Form to the item's title to the subject
 */
function idc_ui_module_form_contact_message_repository_item_contact_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!empty($node)) {
    $form['subject']['widget'][0]['value']['#default_value'] = $node->getTitle() . ' (' . $node->id() . ')';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param $variables
 */
function idc_ui_module_preprocess_status_messages(&$variables) {
  if(isset($variables['message_list']['status'])){
    $status_messages = $variables['message_list']['status'];
    foreach($status_messages as $delta => $message) {
      if (strpos((string) $message->jsonSerialize(), 'Export complete') !== FALSE) {
        $variables['message_list']['status'][$delta] = Drupal\Core\Render\Markup::create(str_replace('http', 'https', $message->jsonSerialize()));
      }
    }
  }
}

/**
 * Implements hook_media_insert().
 */
function idc_ui_module_media_insert(MediaInterface $media) {
  if ($media->bundle() != 'extracted_text') {
    return;
  }

  reindexGrandParent($media);
}

/**
 * Implements hook_media_update().
 */
function idc_ui_module_media_update(MediaInterface $media) {
  if ($media->bundle() != 'extracted_text') {
    return;
  }

  reindexGrandParent($media);
}


/**
 * Reindexes parent node for a media. No-op if parent does not exist.
 *
 * @param Drupal\media\MediaInterface $media
 *   Media whose parent you want to reindex.
 */
function reindexGrandParent(MediaInterface $media) {
  // $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id);
  // $parent = $this->utils->getParentNode($media);

  if (!$media->hasField('field_media_of')) {
    return NULL;
  }
  $field = $media->get('field_media_of');
  if ($field->isEmpty()) {
    return NULL;
  }
  $parent = $field->first()
    ->get('entity')
    ->getTarget();

  if ($parent === NULL) {
    return NULL;
  }
  $parent = $parent->getValue();

  $model_references = $parent->get('field_model')->referencedEntities();

  if ($model_references) {
    $model_type = $model_references[0]->get('name')->getString();
  }

  if ($model_type != 'Page') {
    return NULL;
  }

  if (!$parent->hasField('field_member_of')) {
    return NULL;
  }
  $field = $parent->get('field_member_of');
  if ($field->isEmpty()) {
    return NULL;
  }
  $grand_parent = $field->first()
    ->get('entity')
    ->getTarget();

  if ($grand_parent === NULL) {
    return;
  }
  $grand_parent = $grand_parent->getValue();

  $grand_parent->original = $grand_parent;
  search_api_entity_update($grand_parent);
}
